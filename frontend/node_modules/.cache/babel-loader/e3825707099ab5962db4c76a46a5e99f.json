{"ast":null,"code":"class Auth {\n  constructor(options) {\n    this._address = options.address;\n  }\n\n  register({\n    password,\n    email\n  }) {\n    return fetch(`${this._address}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._checkServerResponseAuth(res));\n  }\n\n  authorization({\n    email,\n    password\n  }) {\n    return fetch(`${this._address}/signin`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._checkServerResponseAuth(res));\n  }\n\n  checkToken(token) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => this._checkServerResponseAuth(res));\n  }\n\n  _checkServerResponseAuth(res) {\n    if (!res.ok) {\n      return Promise.reject(`Error: ${res.status}`);\n    }\n\n    return res.json();\n  }\n\n}\n\nconst auth = new Auth({\n  address: 'https://mesto.nomoreparties.co'\n});\nexport default auth;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/src/utils/auth.js"],"names":["Auth","constructor","options","_address","address","register","password","email","fetch","method","headers","body","JSON","stringify","then","res","_checkServerResponseAuth","authorization","checkToken","token","Authorization","ok","Promise","reject","status","json","auth"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACH;;AAEDC,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAsB;AAC1B,WAAOC,KAAK,CAAE,GAAE,KAAKL,QAAS,SAAlB,EAA4B;AACpCM,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF2B;AAKpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf;AAL8B,KAA5B,CAAL,CAOFO,IAPE,CAOGC,GAAG,IAAI,KAAKC,wBAAL,CAA8BD,GAA9B,CAPV,CAAP;AAQH;;AAEDE,EAAAA,aAAa,CAAC;AAAEV,IAAAA,KAAF;AAASD,IAAAA;AAAT,GAAD,EAAsB;AAC/B,WAAOE,KAAK,CAAE,GAAE,KAAKL,QAAS,SAAlB,EAA4B;AACpCM,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAF2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA,KAAF;AAASD,QAAAA;AAAT,OAAf;AAN8B,KAA5B,CAAL,CAQFQ,IARE,CAQGC,GAAG,IAAI,KAAKC,wBAAL,CAA8BD,GAA9B,CARV,CAAP;AASH;;AAEDG,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,WAAOX,KAAK,CAAE,GAAE,KAAKL,QAAS,WAAlB,EAA8B;AACtCM,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELU,QAAAA,aAAa,EAAG,UAASD,KAAM;AAF1B;AAF6B,KAA9B,CAAL,CAOFL,IAPE,CAOGC,GAAG,IAAI,KAAKC,wBAAL,CAA8BD,GAA9B,CAPV,CAAP;AAQH;;AAEDC,EAAAA,wBAAwB,CAACD,GAAD,EAAM;AAC1B,QAAI,CAACA,GAAG,CAACM,EAAT,EAAa;AACT,aAAOC,OAAO,CAACC,MAAR,CAAgB,UAASR,GAAG,CAACS,MAAO,EAApC,CAAP;AACH;;AACD,WAAOT,GAAG,CAACU,IAAJ,EAAP;AAEH;;AA7CM;;AAgDX,MAAMC,IAAI,GAAG,IAAI1B,IAAJ,CAAS;AAClBI,EAAAA,OAAO,EAAE;AADS,CAAT,CAAb;AAIA,eAAesB,IAAf","sourcesContent":["class Auth {\n    constructor(options) {\n        this._address = options.address\n    }\n\n    register({ password, email }) {\n        return fetch(`${this._address}/signup`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ password, email })\n        })\n            .then(res => this._checkServerResponseAuth(res))\n    }\n\n    authorization({ email, password }) {\n        return fetch(`${this._address}/signin`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        })\n            .then(res => this._checkServerResponseAuth(res))\n    }\n\n    checkToken(token) {\n        return fetch(`${this._address}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            }\n        })\n            .then(res => this._checkServerResponseAuth(res))\n    }\n\n    _checkServerResponseAuth(res) {\n        if (!res.ok) {\n            return Promise.reject(`Error: ${res.status}`);\n        }\n        return res.json();\n\n    }\n}\n\nconst auth = new Auth({\n    address: 'https://mesto.nomoreparties.co',\n})\n\nexport default auth"]},"metadata":{},"sourceType":"module"}