{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._address = options.address;\n    this._headers = options.headers;\n  }\n\n  getUserInfo() {\n    return fetch(`${this._address}/users/me`, {\n      headers: this._headers\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  patchUserInfo({\n    name: inputName,\n    about: inputJob\n  }) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: inputName,\n        about: inputJob\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  getCards() {\n    return fetch(`${this._address}/cards`, {\n      headers: this._headers\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  postCard(apiData) {\n    return fetch(`${this._address}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: apiData.name,\n        link: apiData.link\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (!isLiked) {\n      return this.deleteLike(cardId);\n    } else {\n      return this.setLike(cardId);\n    }\n  }\n\n  setLike(cardId) {\n    return fetch(`${this._address}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._address}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  patchUserAvatar(userData) {\n    return fetch(`${this._address}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userData.avatar\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  _checkServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // Если происходит ошибка, отклоняем промис\n\n\n    return Promise.reject(`${res.status}`);\n  }\n\n}\n\nconst api = new Api({\n  address: 'https://api.a-trsv.nomoredomains.club',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","options","_address","address","_headers","headers","getUserInfo","fetch","then","res","_checkServerResponse","patchUserInfo","name","inputName","about","inputJob","method","body","JSON","stringify","getCards","postCard","apiData","link","deleteCard","cardId","changeLikeCardStatus","isLiked","deleteLike","setLike","authorization","_token","patchUserAvatar","userData","avatar","ok","json","Promise","reject","status","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(options) {\n        this._address = options.address\n        this._headers = options.headers\n    }\n    getUserInfo() {\n        return fetch(`${this._address}/users/me`, {\n            headers: this._headers,\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    patchUserInfo({ name: inputName, about: inputJob }) {\n        return fetch(`${this._address}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: inputName,\n                about: inputJob,\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    getCards() {\n        return fetch(`${this._address}/cards`, {\n            headers: this._headers,\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    postCard(apiData) {\n        return fetch(`${this._address}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: apiData.name,\n                link: apiData.link\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._address}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (!isLiked) {\n            return this.deleteLike(cardId);\n        } else {\n            return this.setLike(cardId);\n        }\n    }\n\n    setLike(cardId) {\n        return fetch(`${this._address}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: this._headers,\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    deleteLike(cardId) {\n        return fetch(`${this._address}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            }\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n    patchUserAvatar(userData) {\n        return fetch(`${this._address}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: userData.avatar\n            })\n        })\n            .then(res => this._checkServerResponse(res))\n    }\n\n    _checkServerResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        // Если происходит ошибка, отклоняем промис\n        return Promise.reject(`${res.status}`)\n    }\n}\n\nconst api = new Api({\n    address: 'https://api.a-trsv.nomoredomains.club',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n\nexport default api"]},"metadata":{},"sourceType":"module"}