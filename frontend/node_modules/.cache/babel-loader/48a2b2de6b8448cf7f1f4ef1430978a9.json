{"ast":null,"code":"import _classCallCheck from\"/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Auth=/*#__PURE__*/function(){function Auth(options){_classCallCheck(this,Auth);this._address=options.address;}_createClass(Auth,[{key:\"_checkServerResponse\",value:function _checkServerResponse(res){if(res.ok){return res.json();}// Если происходит ошибка, отклоняем промис\nreturn Promise.reject(\"\".concat(res.status));}},{key:\"register\",value:function register(password,email){return fetch(\"\".concat(this._address,\"/signup\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({password:password,email:email})});}},{key:\"authorization\",value:function authorization(password,email){var _this=this;return fetch(\"\".concat(this._address,\"/signin\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(function(res){return _this._checkServerResponse(res);}).then(function(data){if(data.token){localStorage.setItem('jwt',data.token);return data.token;}});}},{key:\"checkToken\",value:function checkToken(token){var _this2=this;return fetch(\"\".concat(this._address,\"/users/me\"),{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(token)}}).then(function(res){return _this2._checkServerResponse(res);}).then(function(data){return data;});}}]);return Auth;}();var auth=new Auth({address:'https://auth.nomoreparties.co'});export default auth;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/src/utils/auth.js"],"names":["Auth","options","_address","address","res","ok","json","Promise","reject","status","password","email","fetch","method","headers","body","JSON","stringify","then","_checkServerResponse","data","token","localStorage","setItem","auth"],"mappings":"yVAAMA,CAAAA,I,yBACF,cAAYC,OAAZ,CAAqB,4BACjB,KAAKC,QAAL,CAAgBD,OAAO,CAACE,OAAxB,CACH,C,qDAED,8BAAqBC,GAArB,CAA0B,CACtB,GAAIA,GAAG,CAACC,EAAR,CAAY,CACR,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACD;AACA,MAAOC,CAAAA,OAAO,CAACC,MAAR,WAAkBJ,GAAG,CAACK,MAAtB,EAAP,CACH,C,wBAED,kBAASC,QAAT,CAAmBC,KAAnB,CAA0B,CACtB,MAAOC,CAAAA,KAAK,WAAI,KAAKV,QAAT,YAA4B,CACpCW,MAAM,CAAE,MAD4B,CAEpCC,OAAO,CAAE,CACL,SAAU,kBADL,CAEL,eAAgB,kBAFX,CAF2B,CAMpCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CACF,CACIP,QAAQ,CAAEA,QADd,CAEIC,KAAK,CAAEA,KAFX,CADE,CAN8B,CAA5B,CAAZ,CAaH,C,6BAED,uBAAcD,QAAd,CAAwBC,KAAxB,CAA+B,gBAC3B,MAAOC,CAAAA,KAAK,WAAI,KAAKV,QAAT,YAA4B,CACpCW,MAAM,CAAE,MAD4B,CAEpCC,OAAO,CAAE,CACL,SAAU,kBADL,CAEL,eAAgB,kBAFX,CAF2B,CAMpCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEN,KAAK,CAALA,KAAF,CAASD,QAAQ,CAARA,QAAT,CAAf,CAN8B,CAA5B,CAAL,CAQFQ,IARE,CAQG,SAAAd,GAAG,QAAI,CAAA,KAAI,CAACe,oBAAL,CAA0Bf,GAA1B,CAAJ,EARN,EASFc,IATE,CASG,SAACE,IAAD,CAAU,CACZ,GAAIA,IAAI,CAACC,KAAT,CAAgB,CACZC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAA4BH,IAAI,CAACC,KAAjC,EACA,MAAOD,CAAAA,IAAI,CAACC,KAAZ,CACH,CACJ,CAdE,CAAP,CAeH,C,0BAED,oBAAWA,KAAX,CAAkB,iBACd,MAAOT,CAAAA,KAAK,WAAI,KAAKV,QAAT,cAA8B,CACtCW,MAAM,CAAE,KAD8B,CAEtCC,OAAO,CAAE,CACL,SAAU,kBADL,CAEL,eAAgB,kBAFX,CAGL,iCAA2BO,KAA3B,CAHK,CAF6B,CAA9B,CAAL,CAQFH,IARE,CAQG,SAAAd,GAAG,QAAI,CAAA,MAAI,CAACe,oBAAL,CAA0Bf,GAA1B,CAAJ,EARN,EASFc,IATE,CASG,SAACE,IAAD,QAAUA,CAAAA,IAAV,EATH,CAAP,CAUH,C,oBAEL,GAAMI,CAAAA,IAAI,CAAG,GAAIxB,CAAAA,IAAJ,CAAS,CAClBG,OAAO,CAAE,+BADS,CAAT,CAAb,CAIA,cAAeqB,CAAAA,IAAf","sourcesContent":["class Auth {\n    constructor(options) {\n        this._address = options.address\n    }\n\n    _checkServerResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        // Если происходит ошибка, отклоняем промис\n        return Promise.reject(`${res.status}`)\n    }\n\n    register(password, email) {\n        return fetch(`${this._address}/signup`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(\n                {\n                    password: password,\n                    email: email\n                }\n            )\n        })\n    }\n\n    authorization(password, email) {\n        return fetch(`${this._address}/signin`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        })\n            .then(res => this._checkServerResponse(res))\n            .then((data) => {\n                if (data.token) {\n                    localStorage.setItem('jwt', data.token)\n                    return data.token\n                }\n            })\n    }\n\n    checkToken(token) {\n        return fetch(`${this._address}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            },\n        })\n            .then(res => this._checkServerResponse(res))\n            .then((data) => data)\n    }\n}\nconst auth = new Auth({\n    address: 'https://auth.nomoreparties.co',\n})\n\nexport default auth"]},"metadata":{},"sourceType":"module"}