{"ast":null,"code":"class Auth {\n  constructor(options) {\n    this._address = options.address;\n  }\n\n  _checkServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // Если происходит ошибка, отклоняем промис\n\n\n    return Promise.reject(`${res.status}`);\n  }\n\n  register(password, email) {\n    return fetch(`${this._address}/signup`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: password,\n        email: email\n      })\n    });\n  }\n\n  authorization(password, email) {\n    return fetch(`${this._address}/signin`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._checkServerResponse(res));\n  }\n\n  checkToken(token) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => this._checkServerResponse(res)).then(data => data);\n  }\n\n}\n\nconst auth = new Auth({\n  address: 'https://auth.nomoreparties.co'\n});\nexport default auth;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/src/utils/auth.js"],"names":["Auth","constructor","options","_address","address","_checkServerResponse","res","ok","json","Promise","reject","status","register","password","email","fetch","method","headers","body","JSON","stringify","authorization","then","checkToken","token","data","auth"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACH;;AACDC,EAAAA,oBAAoB,CAACC,GAAD,EAAM;AACtB,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,KAHqB,CAItB;;;AACA,WAAOC,OAAO,CAACC,MAAR,CAAgB,GAAEJ,GAAG,CAACK,MAAO,EAA7B,CAAP;AACH;;AACDC,EAAAA,QAAQ,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACtB,WAAOC,KAAK,CAAE,GAAE,KAAKZ,QAAS,SAAlB,EAA4B;AACpCa,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAF2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACF;AACIP,QAAAA,QAAQ,EAAEA,QADd;AAEIC,QAAAA,KAAK,EAAEA;AAFX,OADE;AAN8B,KAA5B,CAAZ;AAaH;;AAEDO,EAAAA,aAAa,CAACR,QAAD,EAAWC,KAAX,EAAkB;AAC3B,WAAOC,KAAK,CAAE,GAAE,KAAKZ,QAAS,SAAlB,EAA4B;AACpCa,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAF2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA,KAAF;AAASD,QAAAA;AAAT,OAAf;AAN8B,KAA5B,CAAL,CAQFS,IARE,CAQGhB,GAAG,IAAI,KAAKD,oBAAL,CAA0BC,GAA1B,CARV,CAAP;AAUH;;AAEDiB,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,WAAOT,KAAK,CAAE,GAAE,KAAKZ,QAAS,WAAlB,EAA8B;AACtCa,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,yBAAkB,UAASO,KAAM;AAH5B;AAF6B,KAA9B,CAAL,CAQFF,IARE,CAQGhB,GAAG,IAAI,KAAKD,oBAAL,CAA0BC,GAA1B,CARV,EASFgB,IATE,CASIG,IAAD,IAAUA,IATb,CAAP;AAUH;;AAnDM;;AAqDX,MAAMC,IAAI,GAAG,IAAI1B,IAAJ,CAAS;AAClBI,EAAAA,OAAO,EAAE;AADS,CAAT,CAAb;AAIA,eAAesB,IAAf","sourcesContent":["class Auth {\n    constructor(options) {\n        this._address = options.address\n    }\n    _checkServerResponse(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        // Если происходит ошибка, отклоняем промис\n        return Promise.reject(`${res.status}`)\n    }\n    register(password, email) {\n        return fetch(`${this._address}/signup`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(\n                {\n                    password: password,\n                    email: email\n                }\n            )\n        })\n    }\n\n    authorization(password, email) {\n        return fetch(`${this._address}/signin`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        })\n            .then(res => this._checkServerResponse(res))\n           \n    }\n\n    checkToken(token) {\n        return fetch(`${this._address}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`,\n            },\n        })\n            .then(res => this._checkServerResponse(res))\n            .then((data) => data)\n    }\n}\nconst auth = new Auth({\n    address: 'https://auth.nomoreparties.co',\n})\n\nexport default auth"]},"metadata":{},"sourceType":"module"}