{"ast":null,"code":"class Auth {\n  constructor(options) {\n    this._address = options.address;\n  }\n\n  register({\n    password,\n    email\n  }) {\n    return fetch(`${this._address}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._checkServerResponseAuth(res));\n  }\n\n  authorization({\n    email,\n    password\n  }) {\n    return fetch(`${this._address}/signin`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._checkServerResponseAuth(res));\n  }\n\n  checkToken(token) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => this._checkServerResponseAuth(res));\n  }\n\n  _checkServerResponseAuth(res) {\n    if (res.ok) {\n      return res.json();\n    } // Если происходит ошибка, отклоняем промис\n\n\n    return Promise.reject(`${res.status}`);\n  }\n\n}\n\nconst auth = new Auth({\n  address: 'https://mesto.nomoreparties.co'\n});\nexport default auth;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/src/utils/auth.js"],"names":["Auth","constructor","options","_address","address","register","password","email","fetch","method","headers","body","JSON","stringify","then","res","_checkServerResponseAuth","authorization","checkToken","token","Authorization","ok","json","Promise","reject","status","auth"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACH;;AAEDC,EAAAA,QAAQ,CAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAD,EAAoB;AACxB,WAAOC,KAAK,CAAE,GAAE,KAAKL,QAAS,SAAlB,EAA4B;AACpCM,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF2B;AAKpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,QAAAA,QAAD;AAAWC,QAAAA;AAAX,OAAf;AAL8B,KAA5B,CAAL,CAOFO,IAPE,CAOGC,GAAG,IAAI,KAAKC,wBAAL,CAA8BD,GAA9B,CAPV,CAAP;AAQH;;AAEDE,EAAAA,aAAa,CAAC;AAACV,IAAAA,KAAD;AAAQD,IAAAA;AAAR,GAAD,EAAoB;AAC7B,WAAOE,KAAK,CAAE,GAAE,KAAKL,QAAS,SAAlB,EAA4B;AACpCM,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACJ,kBAAU,kBADN;AAEL,wBAAgB;AAFX,OAF2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA,KAAD;AAAQD,QAAAA;AAAR,OAAf;AAN8B,KAA5B,CAAL,CAQFQ,IARE,CAQGC,GAAG,IAAI,KAAKC,wBAAL,CAA8BD,GAA9B,CARV,CAAP;AASH;;AAEDG,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,WAAOX,KAAK,CAAE,GAAE,KAAKL,QAAS,WAAlB,EAA8B;AACtCM,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAELU,QAAAA,aAAa,EAAG,UAASD,KAAM;AAF1B;AAF6B,KAA9B,CAAL,CAOFL,IAPE,CAOGC,GAAG,IAAI,KAAKC,wBAAL,CAA8BD,GAA9B,CAPV,CAAP;AAQH;;AAEDC,EAAAA,wBAAwB,CAACD,GAAD,EAAM;AAC1B,QAAIA,GAAG,CAACM,EAAR,EAAY;AACR,aAAON,GAAG,CAACO,IAAJ,EAAP;AACH,KAHyB,CAI1B;;;AACA,WAAOC,OAAO,CAACC,MAAR,CAAgB,GAAET,GAAG,CAACU,MAAO,EAA7B,CAAP;AACH;;AA7CM;;AAgDX,MAAMC,IAAI,GAAG,IAAI1B,IAAJ,CAAS;AAClBI,EAAAA,OAAO,EAAE;AADS,CAAT,CAAb;AAIA,eAAesB,IAAf","sourcesContent":["class Auth {\n    constructor(options) {\n        this._address = options.address\n    }\n\n    register({password, email}) {\n        return fetch(`${this._address}/signup`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({password, email})\n        })\n            .then(res => this._checkServerResponseAuth(res))\n    }\n\n    authorization({email, password}) {\n        return fetch(`${this._address}/signin`, {\n            method: 'POST',\n            headers: {\n                 'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email, password})\n        })\n            .then(res => this._checkServerResponseAuth(res))\n    }\n\n    checkToken(token) {\n        return fetch(`${this._address}/users/me`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`\n            }\n        })\n            .then(res => this._checkServerResponseAuth(res))\n    }\n\n    _checkServerResponseAuth(res) {\n        if (res.ok) {\n            return res.json()\n        }\n        // Если происходит ошибка, отклоняем промис\n        return Promise.reject(`${res.status}`)\n    }\n}\n\nconst auth = new Auth({\n    address: 'https://mesto.nomoreparties.co',\n})\n\nexport default auth"]},"metadata":{},"sourceType":"module"}