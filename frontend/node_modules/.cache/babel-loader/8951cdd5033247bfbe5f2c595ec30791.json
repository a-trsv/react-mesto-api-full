{"ast":null,"code":"class Auth {\n  constructor(options) {\n    this._address = options.address;\n  }\n\n  _checkServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // Если происходит ошибка, отклоняем промис\n\n\n    return Promise.reject(`${res.status}`);\n  }\n\n  register(password, email) {\n    return fetch(`${this._address}/signup`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: password,\n        email: email\n      })\n    });\n  }\n\n  authorization(password, email) {\n    return fetch(`${this._address}/signin`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._checkServerResponse(res)).then(data => {\n      if (data.token) {\n        localStorage.setItem('jwt', data.token);\n        return data.token;\n      }\n    });\n  }\n\n  checkToken(token) {\n    return fetch(`${this._address}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(res => this._checkServerResponse(res)).then(data => data);\n  }\n\n}\n\nconst auth = new Auth({\n  address: 'https://auth.nomoreparties.co'\n});\nexport default auth;","map":{"version":3,"sources":["/Users/AleksiTarasov/Desktop/develop/react-mesto-auth/src/utils/auth.js"],"names":["Auth","constructor","options","_address","address","_checkServerResponse","res","ok","json","Promise","reject","status","register","password","email","fetch","method","headers","body","JSON","stringify","authorization","then","data","token","localStorage","setItem","checkToken","auth"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACH;;AACLC,EAAAA,oBAAoB,CAACC,GAAD,EAAM;AACtB,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,KAHqB,CAItB;;;AACA,WAAOC,OAAO,CAACC,MAAR,CAAgB,GAAEJ,GAAG,CAACK,MAAO,EAA7B,CAAP;AACH;;AACDC,EAAAA,QAAQ,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACtB,WAAOC,KAAK,CAAE,GAAE,KAAKZ,QAAS,SAAlB,EAA4B;AACpCa,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAF2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACF;AAACP,QAAAA,QAAQ,EAAEA,QAAX;AACAC,QAAAA,KAAK,EAAEA;AADP,OADE;AAN8B,KAA5B,CAAZ;AAWH;;AAEDO,EAAAA,aAAa,CAACR,QAAD,EAAWC,KAAX,EAAiB;AAC1B,WAAOC,KAAK,CAAE,GAAE,KAAKZ,QAAS,SAAlB,EAA4B;AACpCa,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAF2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA,KAAF;AAASD,QAAAA;AAAT,OAAf;AAN8B,KAA5B,CAAL,CAQFS,IARE,CAQGhB,GAAG,IAAI,KAAKD,oBAAL,CAA0BC,GAA1B,CARV,EASFgB,IATE,CASIC,IAAD,IAAU;AACZ,UAAIA,IAAI,CAACC,KAAT,EAAgB;AACZC,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,KAAjC;AACA,eAAOD,IAAI,CAACC,KAAZ;AACH;AACJ,KAdE,CAAP;AAeH;;AAEDG,EAAAA,UAAU,CAACH,KAAD,EAAO;AACb,WAAOT,KAAK,CAAE,GAAE,KAAKZ,QAAS,WAAlB,EAA8B;AACtCa,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,yBAAkB,UAASO,KAAM;AAH5B;AAF6B,KAA9B,CAAL,CAQFF,IARE,CAQGhB,GAAG,IAAI,KAAKD,oBAAL,CAA0BC,GAA1B,CARV,EASFgB,IATE,CASIC,IAAD,IAAUA,IATb,CAAP;AAUH;;AAtDU;;AAwDX,MAAMK,IAAI,GAAG,IAAI5B,IAAJ,CAAS;AAClBI,EAAAA,OAAO,EAAE;AADS,CAAT,CAAb;AAIA,eAAewB,IAAf","sourcesContent":["class Auth {\n    constructor(options) {\n        this._address = options.address\n    }\n_checkServerResponse(res) {\n    if (res.ok) {\n        return res.json()\n    }\n    // Если происходит ошибка, отклоняем промис\n    return Promise.reject(`${res.status}`)\n}\nregister(password, email) {\n    return fetch(`${this._address}/signup`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n            {password: password,\n            email: email}\n        )\n    })\n}\n\nauthorization(password, email){\n    return fetch(`${this._address}/signin`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n    })\n        .then(res => this._checkServerResponse(res))\n        .then((data) => {\n            if (data.token) {\n                localStorage.setItem('jwt', data.token)\n                return data.token\n            }\n        })\n}\n\ncheckToken(token){\n    return fetch(`${this._address}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n        },\n    })\n        .then(res => this._checkServerResponse(res))\n        .then((data) => data)\n}\n}\nconst auth = new Auth({\n    address: 'https://auth.nomoreparties.co',\n})\n\nexport default auth"]},"metadata":{},"sourceType":"module"}